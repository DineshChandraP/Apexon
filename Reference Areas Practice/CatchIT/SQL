13. Data Manipulation (INSERT, UPDATE, DELETE)
Performing DML operations to manage data.

INSERT:
INSERT INTO employees (first_name, last_name, department_id, salary)
VALUES ('John', 'Doe', 3, 60000);
UPDATE:
UPDATE employees
SET salary = salary * 1.10
WHERE department_id = 2;
DELETE:
DELETE FROM employees
WHERE employee_id = 101;
------------------------------------------------------------------------------
8. Indexes and Performance Optimization
Indexes are critical for optimizing query performance, especially for large datasets.

Create Index:
CREATE INDEX idx_employee_department ON employees(department_id);
Drop Index:
DROP INDEX idx_employee_department ON employees;
EXPLAIN to Analyze Queries:
EXPLAIN SELECT * FROM employees WHERE department_id = 2;
EXPLAIN helps you understand how MySQL executes your query and which indexes it uses.
------------------------------------------------------------------------------

16. Handling Large Datasets with LIMIT and OFFSET
For pagination or handling large result sets efficiently.

SELECT * FROM employees
ORDER BY salary DESC
LIMIT 10 OFFSET 20;
------------------------------------------------------------------------------
1. Basic SELECT Query

SELECT first_name, last_name, email
FROM employees
WHERE department = 'Sales'
ORDER BY last_name;

------------------------------------------------------------------------------
2. JOIN Queries
Understanding different types of joins and their use cases is critical.

INNER JOIN:
Retrieves rows when there is a match in both tables.

SELECT e.first_name, e.last_name, d.department_name
FROM employees e
INNER JOIN departments d ON e.department_id = d.department_id;

------------------------------------------------------------------------------
LEFT JOIN (or LEFT OUTER JOIN):
Retrieves all rows from the left table, and matching rows from the right table.

SELECT e.first_name, e.last_name, d.department_name
FROM employees e
LEFT JOIN departments d ON e.department_id = d.department_id;
------------------------------------------------------------------------------

RIGHT JOIN (or RIGHT OUTER JOIN):
Retrieves all rows from the right table, and matching rows from the left table.

SELECT e.first_name, e.last_name, d.department_name
FROM employees e
RIGHT JOIN departments d ON e.department_id = d.department_id;
------------------------------------------------------------------------------
FULL OUTER JOIN:
Retrieves rows when there is a match in one of the tables.

SELECT e.first_name, e.last_name, d.department_name
FROM employees e
FULL OUTER JOIN departments d ON e.department_id = d.department_id;
------------------------------------------------------------------------------
3. GROUP BY and Aggregate Functions
Using GROUP BY with aggregate functions such as COUNT(), SUM(), AVG(), MAX(), MIN().

SELECT department_id, COUNT(*) AS employee_count, AVG(salary) AS average_salary
FROM employees
GROUP BY department_id
HAVING AVG(salary) > 50000;
------------------------------------------------------------------------------
4. Subqueries
Subqueries can be used in SELECT, FROM, and WHERE clauses.

Subquery in SELECT:
SELECT first_name, last_name, 
       (SELECT department_name FROM departments WHERE department_id = e.department_id) AS department
FROM employees e;
------------------------------------------------------------------------------
Subquery in WHERE:
SELECT first_name, last_name
FROM employees
WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Sales');
------------------------------------------------------------------------------
Subquery in FROM:
SELECT department_name, total_salary
FROM (SELECT department_id, SUM(salary) AS total_salary 
      FROM employees 
      GROUP BY department_id) AS subquery
JOIN departments d ON subquery.department_id = d.department_id;
------------------------------------------------------------------------------
6. Common Table Expressions (CTE) (MySQL 8.0+)
CTEs improve query readability and are helpful in recursive queries.

Basic CTE:
WITH department_salary AS (
    SELECT department_id, SUM(salary) AS total_salary
    FROM employees
    GROUP BY department_id
)
SELECT d.department_name, ds.total_salary
FROM department_salary ds
JOIN departments d ON ds.department_id = d.department_id;

-------------------------------------------------------------------
Recursive CTE:
WITH RECURSIVE org_chart AS (
    SELECT employee_id, manager_id, first_name, last_name
    FROM employees
    WHERE manager_id IS NULL
    UNION ALL
    SELECT e.employee_id, e.manager_id, e.first_name, e.last_name
    FROM employees e
    INNER JOIN org_chart o ON e.manager_id = o.employee_id
)
SELECT * FROM org_chart;
------------------------------------------------------------------------------
7. CASE Statements
Use CASE expressions to implement conditional logic within SQL queries.

SELECT first_name, last_name, salary,
       CASE
           WHEN salary > 70000 THEN 'High'
           WHEN salary BETWEEN 50000 AND 70000 THEN 'Medium'
           ELSE 'Low'
       END AS salary_range
FROM employees;
------------------------------------------------------------------------------
10. Handling NULL Values
Working with NULL values properly is essential for ensuring data integrity.

sql
Copy
SELECT first_name, last_name, COALESCE(salary, 0) AS salary
FROM employees;

------------------------------------------------------------------------------
11. Triggers
Triggers are useful for automatically executing SQL operations based on certain events (e.g., INSERT, UPDATE, DELETE).

Example: Trigger on INSERT
sql
Copy
CREATE TRIGGER update_timestamp
BEFORE INSERT ON employees
FOR EACH ROW
SET NEW.created_at = NOW();
------------------------------------------------------------------------------
12. Stored Procedures
Stored procedures are reusable SQL scripts for automating complex operations.

Create Stored Procedure:
DELIMITER $$

CREATE PROCEDURE GetEmployeeDetails(IN emp_id INT)
BEGIN
    SELECT first_name, last_name, department_id
    FROM employees
    WHERE employee_id = emp_id;
END $$

DELIMITER ;


Call Stored Procedure:
CALL GetEmployeeDetails(101);
------------------------------------------------------------------------------

