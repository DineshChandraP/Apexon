Single Responsibility Principle
A class should have only one reason to change, meaning it should have only one job or responsibility.

Open/Closed Principle (OCP)
A class should be open for extension but closed for modification. This means that you can add new functionality to a class without changing its existing code.

Liskov Substitution Principle (LSP)
Objects of a superclass should be replaceable with objects of a subclass without affecting the correctness of the program.

Interface Segregation Principle (ISP)
Clients should not be forced to implement interfaces they do not use. It's better to have several small, specific interfaces than one large, general-purpose interface.

Dependency Inversion Principle (DIP)
High-level modules should not depend on low-level modules. Both should depend on abstractions. Furthermore, abstractions should not depend on details. Details should depend on abstractions.
